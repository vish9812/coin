// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into "user" (
    email, "password", first_name, last_name
) values (
    $1, $2, $3, $4
)
returning id, email, first_name, last_name, created_at
`

type CreateUserParams struct {
	Email     string
	Password  string
	FirstName string
	LastName  *string
}

type CreateUserRow struct {
	ID        int64
	Email     string
	FirstName string
	LastName  *string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from "user"
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
select id, email, first_name, last_name, created_at from "user"
where id = $1 limit 1
`

type GetUserRow struct {
	ID        int64
	Email     string
	FirstName string
	LastName  *string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
select "password" from "user"
where id = $1 limit 1
`

func (q *Queries) GetUserPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getUserPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const listUsers = `-- name: ListUsers :many
select id, email, password, first_name, last_name, created_at from "user"
order by first_name, last_name
limit $1 offset $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
update "user"
    set "password" = $2
where id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}
